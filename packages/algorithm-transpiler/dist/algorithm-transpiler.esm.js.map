{"version":3,"file":"algorithm-transpiler.esm.js","sources":["../src/files.js","../src/variables.js","../src/diff.js","../src/transform.js","../src/toJS.js","../src/vector.js","../src/io.js"],"sourcesContent":["import locale from '@choco/i18n'\n\nconst { algorithmWord } = locale.all()\n\n/** @module libs/algorithm/files */\n\n/**\n * @typedef {object} Files\n * @param {string} code - Algorithm lines.\n */\n\n/**\n * Get name of algorithm.\n * @param {string} code - Algorithm lines\n * @returns {Files} Algorithm name and lines but first line\n * return\n */\nexport default function (code) {\n  const [firstLine, ...lines] = code.split('\\n')\n  const [keyword, name, ...restOfWords] = firstLine.split(' ')\n  if (keyword === algorithmWord && name && restOfWords.length === 0) return [name, lines.join('\\n')]\n  throw new Error('name is invalid')\n}\n","import locale from '@choco/i18n'\n\nconst { begin, end, variables, type } = locale.all()\n\n/** @module @choco/algorithm-transpiler/variables */\n\n/**\n * Transform Algorithm variables in Javascript variables.\n *\n * @param {string} code - Algorithm code.\n * @param {object} store - Store of variables.\n * @example\n * import variables from 'libs/algorithm/variables'\n *\n * const store = {}\n * const code = [\n *   'algorithm easy',\n *   'variables',\n *   '  stuff: string',\n *   'start'.\n *   '  ...'.\n *   'end'\n * ]\n * variables(code, store) // return 'var stuff;\\n'\n * @returns {string} Javascript variables.\n */\nexport default function (code, store) {\n  const literals = ignoreSentences(code)\n  const [firstLine, ...lines] = literals.split('\\n')\n  const [keyword, ...restOfVarLine] = firstLine.split(' ')\n  let result = ''\n  if (isVarsZone(keyword, restOfVarLine)) Object.keys(lines).map(Number).forEach((key) => {\n    const words = lines[key].split(' ')\n    // const i = key + 1\n    if (lines[key].search('//') !== -1) {\n      const remove = lines[key].substr(lines[key].search('//'), lines[key].length)\n      lines[key] = lines[key].replace(remove, '')\n    }\n    Object.keys(words).map(Number).forEach((j) => {\n      if (j < words.length - 1) {\n        const word = prepareWord(words[j])\n        if (word) result += `var ${word};\\n`\n        if (j !== words.length - 1) reserveVars(store, words[words.length - 1],\n          purgeVarName(words[j]))\n      }\n    })\n  })\n  return result.split('\\n').filter((v) => v).join('\\n')\n}\n\n/**\n * Is this line the beginning of the variable area?.\n *\n * @param {string} keyword - First word of line.\n * @param {string[]} restOfVarLine - Rest of words.\n * @example\n * // libs/i18n/variables = ['variables']\n * isVarsZone('variables', []) // return true\n * isVarsZone('variables', ['', '', '', '']) // return true\n * isVarsZone('Another', []) // return false\n * @see libs/i18n/variables\n * @returns {boolean} Is this line the beginning of the variable area?.\n */\nfunction isVarsZone(keyword, restOfVarLine) {\n  return variables.indexOf(keyword) !== -1 &&\n    (!restOfVarLine.length || restOfVarLine.every((v) => !v))\n}\n\n/**\n * Purge variable name of tokens.\n *\n * @param {string} word - Algorithm variable with token.\n * @todo Understand purgeVarName('=') use.\n * @example\n * purgeVarName('=') // return ' = '\n * purgeVarName(' ') // return ''\n * purgeVarName('\\t') // return ''\n * purgeVarName(',') // return ''\n * purgeVarName(':') // return ''\n * purgeVarName('array[10]') // return 'array'\n * @returns {string} Javascript variable without token.\n */\nfunction purgeVarName(word) {\n  return word\n    .replace(/=/g, ' = ')\n    .replace(/ /g, '')\n    .replace(/\\t/g, '')\n    .replace(/,/g, '')\n    .replace(/:/g, '')\n    .replace(/\\[[0-9]{1,9}\\]/g, '')\n}\n\n/**\n * Transform in var section, Algorithm equal, assign type, extra spaces or tabs, separators and\n * vectors to Javascript.\n *\n * @param {string} word - A Algorithm word.\n * @example\n * prepareWord('=') // return ' = '\n * prepareWord(' ') // return ''\n * prepareWord('\\t') // return ''\n * prepareWord(',') // return ''\n * prepareWord(':') // return ''\n * prepareWord('array[10]') // return 'array = new Vector(10)'\n * @returns {string} A Javacript word.\n */\nfunction prepareWord(word) {\n  return word\n    .replace(/=/g, ' = ')\n    .replace(/ /g, '')\n    .replace(/\\t/g, '')\n    .replace(/,/g, '')\n    .replace(/:/g, '')\n    .replace(/\\[/g, ' = new Vector(')\n    .replace(/\\]/g, ')')\n}\n\n/**\n * Reserve vars in the store.\n *\n * @param {object} store - Store of variables.\n * @param {string} isA - Variable type.\n * @param {string} word - Variable name.\n * @example\n * const store = {}\n * reserveVars(store, 'int', 'potato')\n * reserveVars(store, 'double', 'heyApple')\n * reserveVars(store, 'string', 'adc')\n * reserveVars(store, 'bool', 'mid')\n * // store {\n * //   potato: 'int',\n * //   heyApple: 'double',\n * //   adc: 'string',\n * //   mid: 'bool'\n * // }\n */\nfunction reserveVars(store, isA, word) {\n  if (store && store.varAdd)\n  switch (isA) {\n    case type.int:\n      store.varAdd('int', word)\n      break\n    case type.double:\n      store.varAdd('double', word)\n      break\n    case type.string:\n      store.varAdd('string', word)\n      break\n    case type.bool:\n      store.varAdd('bool', word)\n      break\n    default:\n  }\n}\n\n/**\n * Ignore algorithm body.\n *\n * @param {string} code - Algorithm code.\n * @example\n * const code = [\n *   'algorithm easy',\n *   'variables',\n *   '  easy: boolean',\n *   'start',\n *   '   ...',\n *   'end'\n * ].join('\\n')\n * ignoreSentences(code) // return the same code but start ... end block\n * @returns {string} Get the code, less the body (start ... end).\n */\nfunction ignoreSentences(code) {\n  return code.replace(code.match(RegExp(`${begin}[\\\\s\\\\S]*?${end}$`, 'gm'))[0], '')\n}\n","import locale from '@choco/i18n'\n\nconst { begin } = locale.all()\n\n/** @module @choco/algorithm-transpiler/diff */\n\n/**\n * Diff between Algorithm code and Javascript code.\n *\n * @param {*} code - Algorithm code.\n * @param {*} js - Current Javascript code.\n * @example\n * alg = [\n *   'variables',\n *   '  bestAdc: string'\n * ].join('\\n')\n * js = 'var bestAdc'\n * diff(alg, js) // return 1\n * @returns {number} Diff between codes\n */\nexport default function (code, js) {\n  const alg = code\n    .split(/\\n/)\n  let beginIndex = 1\n  while (alg[beginIndex].match(RegExp(begin)) === null) beginIndex++\n\n  beginIndex++\n\n  const localJS = js\n    .split(/\\n/)\n  let jsIndex = 0\n  while (/var/.test(localJS[jsIndex])) jsIndex++\n\n  return beginIndex - jsIndex\n}\n","import locale from '@choco/i18n'\n\nconst { begin, end, toWord, tokens, transpiler, openBracket, closeBracket, write,\n  read } = locale.all()\n\n/** @module libs/algorithm/transform */\n\n// transform between native languaje and javascipt\nexport default function (code) {\n  let line = stripCode(code)\n  let js = ''\n\n  // now the transpiler work\n  Object.keys(line).map(Number).forEach((i) => {\n    // ...\n    line[i] = purgeComment(line[i])\n    line[i] = purgeLine(line[i])\n\n    // vector.io(n).add(value)\n    line[i] = vectorAdd(line[i])\n\n    if (line[i].substr(0, 1) === ' ') {\n      const length = line[i].length - 1\n      line[i] = line[i].substr(1, length)\n    }\n\n    const length = line[i].length - 1\n    while (line[i].substr(length, 1) === ' ') line[i] = line[i].substr(0, length)\n\n    if (line[i] === '') return\n\n    // if (x === y)\n    line = ifIsEqual(line)\n\n    // for (...)\n    line[i] = forLoopCondition(line[i])\n\n    // do ... while (!...)\n    line[i] = doWhileLoopCondition(line[i])\n\n    // each word is separated into a array\n    const word = line[i].split(' ')\n\n    // this loop is to search in various dictionaries, and transform that code\n    Object.keys(word).map(Number).forEach((key) => {\n      // word[key] = word[key].replace(/=/g, ' === ')\n      // dictionaries of words\n      // open blackets\n      if (openBracket.indexOf(word[key]) !== -1) js += '{ '\n      // close brackets\n      else if (closeBracket.indexOf(word[key]) !== -1) js += '}'\n      else if (transpiler[word[key]]) js += `${transpiler[word[key]]} `\n      // dictionaries of tokens\n      else if (tokens[word[key]]) js += `${tokens[word[key]]} `\n      // and words not in the dictionary\n      else js += `${word[key]} `\n    })\n    // console.log('js', js)\n\n    // this fracment of code delete all space in the start of a line\n    // with a style like stack, first reverse the array\n    word.reverse()\n    // then in spaceInStart assign the last element in the stack\n    let spaceInStart = word.pop()\n    const ifNoHaveSpaceInStart = spaceInStart\n    // while it is equal at \"\"\n    // assign at spaceInStart the last element in the stack\n    while (spaceInStart === '') spaceInStart = word.pop()\n\n    // the last element never is \"\"\n    if (typeof spaceInStart === 'undefined') word.push(ifNoHaveSpaceInStart)\n    else word.push(spaceInStart)\n    // and reverse the array again to finish\n    word.reverse()\n\n    const lastLine = js.split('\\n')[js.split('\\n').length - 1]\n    if (lastLine.search('{') !== -1 || lastLine.search('}') !== -1) js += '\\n'\n\n    else if (write.indexOf(word[0]) !== -1) {\n      js = js.replace(\n        write[write.indexOf(word[0])],\n        'eval(write('\n      )\n      js += '));\\n'\n    }\n    else if (read.indexOf(word[0]) !== -1) {\n      js = js.replace(\n        read[read.indexOf(word[0])],\n        'eval(read(\"'\n      )\n      js += '\"));\\n'\n    }\n    else js += ';\\n'\n  })\n  return js\n}\n\nexport function forLoopCondition(lineArg) {\n  // for (...)\n  let line = lineArg\n  const matchCondition = line.match(RegExp(`([\\\\s\\\\S]+${toWord}[\\\\s\\\\S]+)`))\n  if (matchCondition) {\n    let [conditionsFor] = matchCondition\n    conditionsFor = conditionsFor.split(toWord)\n    const ref = matchCondition[0].split(toWord)\n    conditionsFor[0] += ';'\n    conditionsFor[1] = conditionsFor[1].replace('=', '<=')\n    if (conditionsFor[1].search('reversed') === -1) conditionsFor[1] = conditionsFor[1].replace(')', '; i++)')\n    else conditionsFor[1] = conditionsFor[1].replace(')', '; i--)')\n    line = line.replace(ref[0], conditionsFor[0])\n    line = line.replace(ref[1], conditionsFor[1])\n    line = line.replace(toWord, '')\n  }\n  return line\n}\n\nexport function doWhileLoopCondition(line) {\n  // do ... while (!...)\n  if (line.match(RegExp(`${toWord}\\\\s+([\\\\s\\\\S]+)`))) return line.replace('(', '(!(')\n    .replace(/\\)\\s{0,}$/, '))')\n    .replace(/=/g, '===')\n  return line\n}\n/**\n * Add assignment in Vector.\n *\n * @param {string} lineArg - Line of code.\n * @example\n * vectorAdd('stuff.io(7) <- 9') // return 'stuff.io(7).add(9)'\n * @returns {string} Line of code.\n */\nexport function vectorAdd(lineArg) {\n  let line = lineArg\n  // vector.io(n).add(value)\n  while (line.match(/\\.io\\([0-9a-zA-Z]+\\)\\s+<-\\s+[a-zA-Z0-9 ]/)) {\n    line = line.replace(/<-/, '')\n    const exp = line.match(/\\S+/g)\n    line = `${exp[0]}.add(`\n    if (Number.isNaN(+exp[1])) line += `\"${exp[1]}\"`\n    else line += exp[1]\n    line += ')'\n  }\n  return line\n}\n\n/**\n * Add space to prevent bad transpile, and transform array to class Vector.\n *\n * @param {string} line - Line of code.\n * @example\n * purgeLine('function stuff()do') // return 'function stuff () do'\n * purgeLine('array[13]') // return 'array.io(13)'\n * @returns {string} Line of code\n */\nexport function purgeLine(line) {\n  return line\n    .replace(/\\(/g, ' (')\n    .replace(/\\)/g, ') ')\n    .replace(/ {2}/g, ' ')\n    .replace(/\\[/g, '.io(')\n    .replace(/\\]/g, ')')\n}\n\n/**\n * Purge comments of code.\n *\n * @param {string} lineArg - Line of code.\n * @example\n * purgeComment('for (bestADC === \\'Tristana\\') do // some stuff')\n * // return 'for (bestADC === \\'Tristana\\') do '\n * @returns {string} Line of code.\n */\nexport function purgeComment(lineArg) {\n  // ...\n  let line = lineArg\n  if (line.search('//') !== -1) {\n    const remove = line.substr(line.search('//'), line.length)\n    line = line.replace(remove, '')\n  }\n  return line\n}\n\n\nexport function stripCode(codeArg) {\n  // good in this space we are going to make a separation between the code\n  // and the variables\n  const [code] = codeArg.match(RegExp(`${begin}[\\\\s\\\\S]*?${end}$`, 'gm'))\n  // each line is separated into a array\n  const lines = code.split('\\n')\n\n  // the word \"fin\" is deleted\n  if (lines[lines.length - 1].search(end) !== -1) lines.pop()\n\n  // reverse the line of array\n  lines.reverse()\n  // the word \"inicio\" is deleted\n  if (lines[lines.length - 1].search(begin) !== -1) lines.pop()\n\n  // reverse the line of array\n  lines.reverse()\n  return lines\n}\n\n/**\n * Parse equal token from Algorithm to Javascript.\n *\n * @param {string[]} linesArg - Line of code.\n * @example\n * ifIsEqual(['for (text = \\'Not text\\') do'])\n * // return ['for (text === \\'Not text\\') do']\n * @returns {string[]} Lines of code.\n */\nfunction ifIsEqual(linesArg) {\n  // if (x === y)\n  const lines = linesArg\n  Object.keys(lines).map(Number).forEach((key) => {\n    if (lines[key].match(RegExp(`=(.)+${openBracket[key]}`))) lines[key] = lines[key].replace(/=/g, ' === ')\n  })\n  return lines\n}\n","import files from './files'\nimport vars from './variables'\nimport diffAlg from './diff'\nimport transform from './transform'\n\n// function joinCodes(tabs) {\n//   return tabs\n//     .reverse()\n//     .map((value) => value.content)\n//     .join()\n// }\n\nlet tabs\nlet store\n\n\nexport function setDispatch({ varAdd, varReset }) {\n  store = { varAdd, varReset }\n}\n\nexport function setTabs(externalTabs) {\n  tabs = externalTabs\n}\n\nexport function toJS() {\n  store.varReset()\n\n  // and execute a interpreter\n  // const codesInString = joinCodes(tabs)\n  const codesInString = tabs[0].content\n  const [title, codeFromTitle] = files(codesInString)\n  const literals = vars(codeFromTitle, store)\n  const diff = diffAlg(codesInString, literals)\n  const map = tabs.map((v) => v.content)\n\n  // show the output\n  const code = transform(codeFromTitle)\n  return {\n    title,\n    literals,\n    code,\n    diff,\n    map\n  }\n}\n","/** @module libs/vector */\n\n/** @classdesc Represent a Array of algorithms. */\nexport class Vector {\n  /**\n   * Constructor.\n   *\n   * @param {number} size - Vector size.\n   * @example\n   * new Vector(10)\n   */\n  constructor(size) {\n    if (size <= 0 || typeof size !== 'number') throw new Error('ERROR: invalid array argument')\n\n    /** vector size */\n    this.size = size\n\n    /** inner array */\n    this.array = []\n  }\n\n  /**\n   * Assign value in vector.\n   *\n   * @param {any} value - Value to be added.\n   * @param {number} index - Index in vector.\n   */\n  add(value, index) {\n    const fixIndex = index - 1\n    if (fixIndex === -1) throw new Error('ERROR: array null point')\n    if (fixIndex < this.size && this.size > 0) this.array[fixIndex] = value\n    else throw new Error('ERROR: array overflow')\n  }\n\n  /**\n   * Get a value of vector.\n   *\n   * @param {number} index - Index of vector.\n   * @returns {any} Value store in index argument.\n   */\n  show(index) {\n    const start = index - 1\n    if (start < this.size && start >= 0) return this.array[start]\n    throw new Error('ERROR: array null point')\n  }\n\n  /**\n   * Provide an alternative interface, used in libs/algorithm/transform.\n   *\n   * @param {number} index - Index of Vector.\n   * @see {@link transform}\n   * @returns {}\n   */\n  io(index) {\n    return {\n      /**\n       * Assign value in vector\n       * @param {any} value - Value to be added\n       */\n      add: (value) => this.add(value, index),\n\n      /**\n       * Get a value of vector\n       * @returns {any} Value store in index argument\n       */\n      show: () => this.show(index),\n\n      /**\n       * Get value of vector if it's parse to string\n       * @returns {any} Value store in index argument\n       */\n      toString: () => this.show(index),\n\n      /**\n       * Confirm that is a vector\n       * @returns {boolean}\n       */\n      isVector: () => true\n    }\n  }\n}\n","import keychain from '@choco/keychain'\nimport locale from '@choco/i18n'\n\nconst { typeError } = locale.all()\n\n/** @module @choco/algorithm-transpiler/io */\n\nexport const io = {\n  show: true,\n\n  reset() {\n    this.text = undefined\n    this.lastText = undefined\n    this.show = true\n  },\n\n  addText(text) {\n    this.lastText = this.text\n    this.text = text\n  },\n\n  error() {\n    this.show = false\n  }\n}\n\nexport function read(toRead, variables, lastLine) {\n  let toReadCopy = toRead\n\n  // flags\n  let isVector = false\n  let newLastLine\n\n  // clean up unnecessary signs\n  while (toReadCopy.substr(0, 1) === ' ') {\n    const length = toReadCopy.length - 1\n    toReadCopy = toReadCopy.substr(1, length)\n  }\n  while (toReadCopy.substr(toReadCopy.length - 1, 1) === ' ') toReadCopy = toReadCopy.substr(0, toReadCopy.length - 1)\n  let input\n\n  if (io.text && io.text !== io.lastRext) input = prompt(io.text)\n  else input = prompt('')\n  // if var not exist, not work\n  if (lastLine && lastLine.var) newLastLine = Object.freeze({ ...lastLine, content: input })\n  else newLastLine = Object.freeze({ ...lastLine, var: input })\n\n  if (typeof toReadCopy === 'object') return readResponse(`${toReadCopy} = ${input};`, newLastLine)\n  // vector\n  if (toReadCopy.search(/\\.io\\(/) !== -1) {\n    isVector = true\n    toReadCopy += `.add(${input})`\n  }\n  // here in runtime show the mistakes in assignings\n  console.log(variables, variables[toReadCopy], 'copy')\n  switch (variables[toReadCopy]) {\n    case 'int':\n      if (Number.isNaN(Number(input)) || +input !== Math.trunc(input)) return readResponse(`write('${typeError.int}'); io.error();`, newLastLine)\n      break\n    case 'double':\n      if (Number.isNaN(Number(input))) return readResponse(`write('${typeError.double}'); io.error();`, newLastLine)\n      break\n    case 'string':\n      break\n    case 'bool':\n      if (Number.isNaN(Number(input)) || (input === true || input === false)) return readResponse(`write('${typeError.bool}'); io.error();`, newLastLine)\n      break\n    default:\n      throw new Error('Unknow var type')\n  }\n\n  if (variables[toReadCopy] === 'string') return readResponse(`${toReadCopy} = '${input}';`, newLastLine)\n\n  if (isVector) return readResponse(`${toReadCopy};`, newLastLine)\n\n  return readResponse(`${toReadCopy} = ${input};`, newLastLine)\n}\n\nfunction readResponse(assign, lastLine) {\n  // const id = keychain('line')\n  return Object.freeze({ assign, lastLine })\n}\n\nexport function write(...args) {\n  // var\n  let result = ''\n  let error\n  Object.values(args[0]).forEach((text) => {\n    let textCopy = text\n    if (typeof textCopy === 'object' && textCopy.isVector && textCopy.isVector()) textCopy = textCopy.show()\n\n    if (typeof textCopy === 'number' && Number.isNaN(textCopy)) error = `write('${error.stringForNumber}'); io.error();`\n    if (typeof textCopy === 'number' && !Number.isFinite(textCopy)) error = `write('${error.infinity}'); io.error();`\n    result += textCopy\n  })\n\n  if (error) return Object.freeze({\n    id: keychain('line'),\n    error: true,\n    content: error\n  })\n  // io.show is a flag, avoids execution after errors\n  if (io.show) {\n    // if (io.lastText === result)\n    //   io.resetLast()\n    io.addText(result)\n    return Object.freeze({\n      id: keychain('line'),\n      error: false,\n      content: result\n    })\n  }\n  return Object.freeze({\n    id: keychain('line'),\n    error: false,\n    content: ''\n  })\n}\n"],"names":["algorithmWord","locale","all","code","firstLine","lines","split","keyword","name","restOfWords","length","join","Error","begin","end","variables","type","store","literals","ignoreSentences","restOfVarLine","result","isVarsZone","Object","keys","map","Number","forEach","key","words","search","remove","substr","replace","j","word","prepareWord","reserveVars","purgeVarName","filter","v","indexOf","every","isA","varAdd","int","double","string","bool","match","RegExp","js","alg","beginIndex","localJS","jsIndex","test","toWord","tokens","transpiler","openBracket","closeBracket","write","read","line","stripCode","i","purgeComment","purgeLine","vectorAdd","ifIsEqual","forLoopCondition","doWhileLoopCondition","reverse","spaceInStart","pop","ifNoHaveSpaceInStart","push","lastLine","lineArg","matchCondition","conditionsFor","ref","exp","isNaN","codeArg","linesArg","tabs","setDispatch","varReset","setTabs","externalTabs","toJS","codesInString","content","title","codeFromTitle","files","vars","diff","diffAlg","transform","Vector","constructor","size","array","add","value","index","fixIndex","show","start","io","toString","isVector","typeError","reset","text","undefined","lastText","addText","error","toRead","toReadCopy","newLastLine","input","lastRext","prompt","var","freeze","readResponse","console","log","Math","trunc","assign","args","values","textCopy","stringForNumber","isFinite","infinity","id","keychain"],"mappings":"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"}