{"version":3,"file":"index.js","sources":["../src/javascript.ts","../src/eslint.ts"],"sourcesContent":["import {parser} from \"lezer-javascript\"\nimport {flatIndent, continuedIndent, indentNodeProp, foldNodeProp, LezerSyntax} from \"../../syntax\"\nimport {languageData} from \"../../state\"\nimport {Subtree} from \"lezer-tree\"\nimport {styleTags} from \"../../highlight\"\nimport {CloseBracketData} from \"../../closebrackets\"\n\nconst statementIndent = continuedIndent({except: /^{/})\n\n/// A syntax provider based on the [Lezer JavaScript\n/// parser](https://github.com/lezer-parser/javascript), extended with\n/// highlighting and indentation information.\nexport const javascriptSyntax = new LezerSyntax(parser.withProps(\n  indentNodeProp.add(type => {\n    if (type.name == \"IfStatement\") return continuedIndent({except: /^({|else\\b)/})\n    if (type.name == \"TryStatement\") return continuedIndent({except: /^({|catch|finally)\\b/})\n    if (type.name == \"LabeledStatement\") return flatIndent\n    if (type.name == \"SwitchBody\") return context => {\n      let after = context.textAfter, closed = after[0] == \"}\", isCase = /^(case|default)\\b/.test(after)\n      return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit\n    }\n    if (type.name == \"TemplateString\" || type.name == \"BlockComment\") return () => -1\n    if (/(Statement|Declaration)$/.test(type.name) || type.name == \"Property\") return statementIndent\n    return undefined\n  }),\n  foldNodeProp.add({\n    Block(tree: Subtree) { return {from: tree.start + 1, to: tree.end - 1} }\n  }),\n  languageData.add({\n    Script: {closeBrackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]} as CloseBracketData\n  }),\n  styleTags({\n    \"get set async static\": \"modifier\",\n    \"for while do if else switch try catch finally return throw break continue default case\": \"keyword control\",\n    \"in of await yield void typeof delete instanceof\": \"operatorKeyword\",\n    \"export import let var const function class extends\": \"keyword definition\",\n    \"with debugger from as\": \"keyword\",\n    TemplateString: \"string#2\",\n    \"BooleanLiteral Super\": \"atom\",\n    this: \"self\",\n    null: \"null\",\n    Star: \"modifier\",\n    VariableName: \"variableName\",\n    VariableDefinition: \"variableName definition\",\n    Label: \"labelName\",\n    PropertyName: \"propertyName\",\n    PropertyNameDefinition: \"propertyName definition\",\n    \"PostfixOp UpdateOp\": \"updateOperator\",\n    LineComment: \"lineComment\",\n    BlockComment: \"blockComment\",\n    Number: \"number\",\n    String: \"string\",\n    ArithOp: \"arithmeticOperator\",\n    LogicOp: \"logicOperator\",\n    BitOp: \"bitwiseOperator\",\n    CompareOp: \"compareOperator\",\n    RegExp: \"regexp\",\n    Equals: \"operator definition\",\n    Spread: \"punctuation\",\n    \"Arrow :\": \"punctuation definition\",\n    \"( )\": \"paren\",\n    \"[ ]\": \"squareBracket\",\n    \"{ }\": \"brace\",\n    \".\": \"derefOperator\",\n    \", ;\": \"separator\"\n  })\n))\n\n/// Returns an extension that installs the JavaScript syntax provider.\nexport function javascript() { return javascriptSyntax.extension }\n","import {Diagnostic} from \"../../lint\"\nimport {Text, EditorState} from \"../../state\"\nimport {EditorView} from \"../../view\"\nimport {javascriptSyntax} from \"./javascript\"\nimport {LezerSyntax} from \"../../syntax\"\n\n/// Connects an [ESLint](https://eslint.org/) linter to CodeMirror's\n/// [lint](#lint) integration. `eslint` should be an instance of the\n/// [`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\n/// class, and `config` an optional ESLint configuration. The return\n/// value of this function can be passed to [`linter`](#lint.linter)\n/// to create a JavaScript linting extension.\n///\n/// Note that ESLint targets node, and is tricky to run in the\n/// browser. The [eslint4b](https://github.com/mysticatea/eslint4b)\n/// and\n/// [eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\n/// packages may help with that.\nexport function esLint(eslint: any, config?: any) {\n  if (!config) {\n    config = {\n      parserOptions: {ecmaVersion: 2019, sourceType: \"module\"},\n      env: {browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true},\n      rules: {}\n    }\n    eslint.getRules().forEach((desc: any, name: string) => {\n      if (desc.meta.docs.recommended) config.rules[name] = 2\n    })\n  }\n\n  function range(state: EditorState, from: number = 0, to: number = state.doc.length) {\n    let fromLine = state.doc.lineAt(from), offset = {line: fromLine.number - 1, col: from - fromLine.start, pos: from}\n    return eslint.verify(state.doc.slice(from, to), config)\n      .map((val: any) => translateDiagnostic(val, state.doc, offset))\n  }\n\n  return (view: EditorView) => {\n    let [syntax] = view.state.facet(EditorState.syntax)\n    if (syntax == javascriptSyntax) return range(view.state)\n    if (!syntax || !(syntax instanceof LezerSyntax && syntax.parser.hasNested)) return []\n    let found: Diagnostic[] = []\n    // FIXME move to async parsing?\n    syntax.getTree(view.state).iterate({\n      enter(type, start, end) {\n        if (type == javascriptSyntax.docNodeType) {\n          for (let d of range(view.state, start, end)) found.push(d)\n          return false\n        }\n        return undefined\n      }\n    })\n    return found\n  }\n}\n\nfunction mapPos(line: number, col: number, doc: Text, offset: {line: number, col: number, pos: number}) {\n  return doc.line(line + offset.line).start + col + (line == 1 ? offset.col - 1 : -1)\n}\n\nfunction translateDiagnostic(input: any, doc: Text, offset: {line: number, col: number, pos: number}): Diagnostic {\n  let start = mapPos(input.line, input.column, doc, offset)\n  let result: Diagnostic = {\n    from: start,\n    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n    message: input.message,\n    source: input.ruleId ? \"jshint:\" + input.ruleId : \"jshint\",\n    severity: input.severity == 1 ? \"warning\" : \"error\",\n  }\n  if (input.fix) {\n    let {range, text} = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start\n    result.actions = [{\n      name: \"fix\",\n      apply(view: EditorView, start: number) {\n        view.dispatch(view.state.t().replace(start + from, start + to, text).scrollIntoView())\n      }\n    }]\n  }\n  return result\n}\n"],"names":["continuedIndent","LezerSyntax","parser","indentNodeProp","flatIndent","foldNodeProp","languageData","styleTags","syntax","EditorState"],"mappings":"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"}