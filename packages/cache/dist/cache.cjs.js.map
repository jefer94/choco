{"version":3,"file":"cache.cjs.js","sources":["../src/cache.js"],"sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport { createClient, print } from 'redis'\nimport chalk from 'chalk'\nimport middlewares, { listen as httpListen, httpClose } from '@choco/middlewares'\n\nconst { log } = console\n\n/** @module @choco/cache */\n\nconst app = express()\nlet client\n\n/**\n * Start Redis.\n *\n * @example\n * startDB()\n */\nexport function startDB() {\n  client = createClient()\n\n  client.on('error', (error) => {\n    log(chalk.red(error))\n  })\n}\n\nexport const listen = () => httpListen(app)\nexport const close = httpClose\n\n/**\n * Get value from key.\n *\n * @example\n * clientGet('key') // return redis promise\n * @param {string} key - Key.\n * @returns {Promise} Value.\n */\nfunction clientGet(key) {\n  return new Promise((resolve, reject) => {\n    client.get(key, (err, value) => {\n      if (err) { reject(err) }\n      resolve(value)\n    })\n  })\n}\n\nmiddlewares(app)\n\n// const clientGet = promisify(client.get).bind(client)\n\napp.use(bodyParser.json()) // for parsing application/json\napp.use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/', async (req, res) => {\n  if (req.body) {\n    try {\n      const { mode, key, value } = req.body\n      if (mode && key) {\n        if (mode === 'set' && value) {\n          client.set(req.body.key, req.body.value, print)\n          res.statusCode = 204\n          res.send()\n        } else {\n          res.send(await clientGet(req.body.key))\n        }\n      }\n    } catch (e) {\n      res.statusCode = 500\n      res.json(JSON.stringify(e))\n    }\n  } else {\n    res.statusCode = 500\n    res.send('')\n  }\n})\n\nexport default app\n"],"names":["log","console","app","express","client","middlewares","use","bodyParser","json","urlencoded","extended","post","async","req","res","body","mode","key","value","set","print","statusCode","send","Promise","resolve","reject","get","err","clientGet","e","JSON","stringify","createClient","on","error","chalk","red","httpListen"],"mappings":"8NAMMA,IAAEA,GAAQC,QAIVC,EAAMC,IACZ,IAAIC,EAoCJC,EAAYH,GAIZA,EAAII,IAAIC,EAAWC,QACnBN,EAAII,IAAIC,EAAWE,WAAW,CAAEC,UAAU,KAE1CR,EAAIS,KAAK,IAAKC,MAAOC,EAAKC,QACpBD,EAAIE,eAEEC,KAAEA,EAAFC,IAAQA,EAARC,MAAaA,GAAUL,EAAIE,KAC7BC,GAAQC,IACG,QAATD,GAAkBE,GACpBd,EAAOe,IAAIN,EAAIE,KAAKE,IAAKJ,EAAIE,KAAKG,MAAOE,SACzCN,EAAIO,WAAa,IACjBP,EAAIQ,QAEJR,EAAIQ,WA1Bd,SAAmBL,UACV,IAAIM,QAAQ,CAACC,EAASC,KAC3BrB,EAAOsB,IAAIT,EAAK,CAACU,EAAKT,KAChBS,GAAOF,EAAOE,GAClBH,EAAQN,OAsBWU,CAAUf,EAAIE,KAAKE,OAGtC,MAAOY,GACPf,EAAIO,WAAa,IACjBP,EAAIN,KAAKsB,KAAKC,UAAUF,SAG1Bf,EAAIO,WAAa,IACjBP,EAAIQ,KAAK,MArDXlB,EAAS4B,iBAET5B,EAAO6B,GAAG,QAAUC,IAClBlC,EAAImC,EAAMC,IAAIF,MAIUG,SAAWnC"}