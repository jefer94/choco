{"version":3,"file":"env.esm.js","sources":["../src/keys.js","../src/env-loader.js","../src/env.js"],"sourcesContent":["export const keys = '__ENV_KEYS__'\nexport const externalKey = '__EXTERNAL_ENV__'\n","import dotenv from 'dotenv'\nimport { memo } from '@choco/functional'\nimport { keys, externalKey } from './keys'\n\n/** @module @choco/env */\n\n/**\n * Load env.\n *\n * @param {boolean} externalEnv - Value.\n * @example\n * loadEnv()\n */\nexport function loadEnv(externalEnv) {\n  if (externalEnv && typeof externalEnv === 'object') { memo(externalKey, externalEnv) }\n  if (!memo(keys)) { memo(keys, []) }\n  dotenv.config({ path: '../../.env' })\n\n  const data = externalEnv || process.env\n  Object.keys(data).forEach((key) => {\n    const memokey = `__ENV__${key}`\n    memo(memokey, data[key])\n    memo(keys, [...memo(keys), key])\n  })\n}\n","import { memo } from '@choco/functional'\nimport { keys, externalKey } from './keys'\n\n/** @module @choco/env */\n\n/**\n * Prevent that one env key was replaced.\n *\n * @param {string} key - Env key.\n * @returns {string} Key prefixed.\n */\nfunction envKeyPrefix(key) {\n  const prefix = '__ENV__'\n  return `${prefix}${key}`\n}\n\n/**\n * Reset env.\n *\n * @example\n * resetEnv()\n */\nexport function resetEnv() {\n  memo(externalKey, {})\n  process.env = {}\n  memo(keys, [])\n}\n\n/**\n * Get/set env.\n *\n * @param {string} key - Key.\n * @param {string} value - Value.\n * @example\n * env('pokemon') // returns undefined\n * env('pokemon', 'potato') // returns 'potato'\n * env('pokemon') // returns 'potato'\n * env() // returns { pokemon: 'potato' }\n * @returns {string|object} Env var.\n */\nexport function env(key, value) {\n  const memokey = envKeyPrefix(key)\n\n  if (!key && !value) {\n    return (memo(keys) || []).reduce((obj, key) =>\n      ({ ...obj, [key]: memo(envKeyPrefix(key)) }), {})\n  }\n\n  if (value) {\n    process.env[key] = value\n    memo(memokey, value)\n    if (memo(keys)) {\n      memo(keys, [...Object.values(memo(keys)), key]) // error\n    } else {\n      memo(keys, [key]) // error\n    }\n  }\n  return memo(memokey) || process.env[key]\n}\n"],"names":["keys","loadEnv","externalEnv","memo","dotenv","config","path","data","process","env","Object","forEach","key","envKeyPrefix","resetEnv","value","memokey","values","reduce","obj"],"mappings":"+DAAO,MAAMA,EAAO,eCab,SAASC,EAAQC,GAClBA,GAAsC,iBAAhBA,GAA4BC,EDb7B,mBCa+CD,GACnEC,EAAKH,IAASG,EAAKH,EAAM,IAC9BI,EAAOC,OAAO,CAAEC,KAAM,qBAEhBC,EAAOL,GAAeM,QAAQC,IACpCC,OAAOV,KAAKO,GAAMI,QAASC,IAEzBT,EADiB,UAASS,EACZL,EAAKK,IACnBT,EAAKH,EAAM,IAAIG,EAAKH,GAAOY,MCX/B,SAASC,EAAaD,SAEZ,UAAWA,EASd,SAASE,IACdX,EFtByB,mBEsBP,IAClBK,QAAQC,IAAM,GACdN,EAAKH,EAAM,IAeN,SAASS,EAAIG,EAAKG,SACjBC,EAAUH,EAAaD,UAExBA,GAAQG,GAKTA,IACFP,QAAQC,IAAIG,GAAOG,EACnBZ,EAAKa,EAASD,GACVZ,EAAKH,GACPG,EAAKH,EAAM,IAAIU,OAAOO,OAAOd,EAAKH,IAAQY,IAE1CT,EAAKH,EAAM,CAACY,KAGTT,EAAKa,IAAYR,QAAQC,IAAIG,KAb1BT,EAAKH,IAAS,IAAIkB,OAAO,CAACC,EAAKP,SAC/BO,GAAMP,GAAMT,EAAKU,EAAaD,MAAU"}