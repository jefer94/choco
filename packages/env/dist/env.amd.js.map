{"version":3,"file":"env.amd.js","sources":["../src/keys.js","../src/env.js","../src/env-loader.js"],"sourcesContent":["export const keys = '__ENV_KEYS__'\nexport const externalKey = '__EXTERNAL_ENV__'\n","import { memo } from '@choco/functional'\nimport { keys, externalKey } from './keys'\n\n/** @module @choco/env */\n\n/**\n * Prevent that one env key was replaced.\n *\n * @param {string} key - Env key.\n * @returns {string} Key prefixed.\n */\nfunction envKeyPrefix(key) {\n  const prefix = '__ENV__'\n  return `${prefix}${key}`\n}\n\n/**\n * Reset env.\n *\n * @example\n * resetEnv()\n */\nexport function resetEnv() {\n  memo(externalKey, {})\n  process.env = {}\n  memo(keys, [])\n}\n\n/**\n * Get/set env.\n *\n * @param {string} key - Key.\n * @param {string} value - Value.\n * @example\n * env('pokemon') // returns undefined\n * env('pokemon', 'potato') // returns 'potato'\n * env('pokemon') // returns 'potato'\n * env() // returns { pokemon: 'potato' }\n * @returns {string|object} Env var.\n */\nexport function env(key, value) {\n  const memokey = envKeyPrefix(key)\n\n  if (!key && !value) {\n    return (memo(keys) || []).reduce((obj, key) =>\n      ({ ...obj, [key]: memo(envKeyPrefix(key)) }), {})\n  }\n\n  if (value) {\n    process.env[key] = value\n    memo(memokey, value)\n    if (memo(keys)) {\n      memo(keys, [...Object.values(memo(keys)), key]) // error\n    } else {\n      memo(keys, [key]) // error\n    }\n  }\n  return memo(memokey) || process.env[key]\n}\n","import dotenv from 'dotenv'\nimport { memo } from '@choco/functional'\nimport { keys, externalKey } from './keys'\n\n/** @module @choco/env */\n\n/**\n * Load env.\n *\n * @param {boolean} externalEnv - Value.\n * @example\n * loadEnv()\n */\nexport function loadEnv(externalEnv) {\n  if (externalEnv && typeof externalEnv === 'object') { memo(externalKey, externalEnv) }\n  if (!memo(keys)) { memo(keys, []) }\n  dotenv.config({ path: '../../.env' })\n\n  const data = externalEnv || process.env\n  Object.keys(data).forEach((key) => {\n    const memokey = `__ENV__${key}`\n    memo(memokey, data[key])\n    memo(keys, [...memo(keys), key])\n  })\n}\n"],"names":["keys","envKeyPrefix","key","value","memokey","process","env","memo","Object","values","reduce","obj","externalEnv","dotenv","config","path","data","forEach"],"mappings":"iJAAO,MAAMA,EAAO,eCWpB,SAASC,EAAaC,SAEZ,UAAWA,UA2Bd,SAAaA,EAAKC,SACjBC,EAAUH,EAAaC,UAExBA,GAAQC,GAKTA,IACFE,QAAQC,IAAIJ,GAAOC,EACnBI,OAAKH,EAASD,GACVI,OAAKP,GACPO,OAAKP,EAAM,IAAIQ,OAAOC,OAAOF,OAAKP,IAAQE,IAE1CK,OAAKP,EAAM,CAACE,KAGTK,OAAKH,IAAYC,QAAQC,IAAIJ,KAb1BK,OAAKP,IAAS,IAAIU,OAAO,CAACC,EAAKT,SAC/BS,GAAMT,GAAMK,OAAKN,EAAaC,MAAU,eChC7C,SAAiBU,GAClBA,GAAsC,iBAAhBA,GAA4BL,OFb7B,mBEa+CK,GACnEL,OAAKP,IAASO,OAAKP,EAAM,IAC9Ba,EAAOC,OAAO,CAAEC,KAAM,qBAEhBC,EAAOJ,GAAeP,QAAQC,IACpCE,OAAOR,KAAKgB,GAAMC,QAASf,UACnBE,EAAW,UAASF,IAC1BK,OAAKH,EAASY,EAAKd,IACnBK,OAAKP,EAAM,IAAIO,OAAKP,GAAOE,kBDAxB,WACLK,ODtByB,mBCsBP,IAClBF,QAAQC,IAAM,GACdC,OAAKP,EAAM"}